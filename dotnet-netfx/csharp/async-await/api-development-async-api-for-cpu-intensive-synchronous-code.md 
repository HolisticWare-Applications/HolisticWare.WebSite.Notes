# API development - async API for CPU intensive synchronous code

api-development-async-api-for-cpu-intensive-synchronous-code.md 

* https://blog.csainty.com/2013/02/wrapping-synchronous-code-in-task.html

public class AsyncCommand1 : IAsyncCommand
{
  public Task ExecuteAsync()
  {
    int x = 2 + 2;
    return Task.FromResult(true);
  }
}

public class AsyncCommand2 : IAsyncCommand
{
  public async Task ExecuteAsync()
  {
    int x = 2 + 2;
  }
}

public class AsyncCommand3 : IAsyncCommand
{
  public Task ExecuteAsync()
  {
    return Task.Run(() => { int x = 2 + 2; })
  }
}



https://stackoverflow.com/questions/13127177/if-my-interface-must-return-task-what-is-the-best-way-to-have-a-no-operation-imp



convert from the async version that yields compiler warning CS1998 to a non-async version that behaves identically is as follows.

Remove the async keyword.
Wrap the entire existing method body with a try-catch.
Define a TaskCompletionSource<T> called tcs before the try-catch.
Replace all existing instances of return <expr>; with tcs.SetResult(<expr>); followed by  return tcs.Task;.
Define the catch block to call tcs.SetException(e) followed by return tcs.Task;.


https://msdn.microsoft.com/en-us/magazine/jj991977.aspx
