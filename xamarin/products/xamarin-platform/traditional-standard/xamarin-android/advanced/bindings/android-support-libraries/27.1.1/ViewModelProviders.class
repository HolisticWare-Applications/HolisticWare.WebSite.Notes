package android.arch.lifecycle;

import android.annotation.*;
import android.app.*;
import android.support.annotation.*;
import android.support.v4.app.*;
import java.lang.reflect.*;

public class ViewModelProviders
{
    @SuppressLint({ "StaticFieldLeak" })
    private static DefaultFactory sDefaultFactory;
    
    private static void initializeFactoryIfNeeded(final Application application) {
        if (ViewModelProviders.sDefaultFactory == null) {
            ViewModelProviders.sDefaultFactory = new DefaultFactory(application);
        }
    }
    
    private static Application checkApplication(final Activity activity) {
        final Application application = activity.getApplication();
        if (application == null) {
            throw new IllegalStateException("Your activity/fragment is not yet attached to Application. You can't request ViewModel before onCreate call.");
        }
        return application;
    }
    
    private static Activity checkActivity(final Fragment fragment) {
        final Activity activity = (Activity)fragment.getActivity();
        if (activity == null) {
            throw new IllegalStateException("Can't create ViewModelProvider for detached fragment");
        }
        return activity;
    }
    
    @MainThread
    public static ViewModelProvider of(@NonNull final Fragment fragment) {
        initializeFactoryIfNeeded(checkApplication(checkActivity(fragment)));
        return new ViewModelProvider(ViewModelStores.of(fragment), ViewModelProviders.sDefaultFactory);
    }
    
    @MainThread
    public static ViewModelProvider of(@NonNull final FragmentActivity activity) {
        initializeFactoryIfNeeded(checkApplication((Activity)activity));
        return new ViewModelProvider(ViewModelStores.of(activity), ViewModelProviders.sDefaultFactory);
    }
    
    @MainThread
    public static ViewModelProvider of(@NonNull final Fragment fragment, @NonNull final ViewModelProvider.Factory factory) {
        checkApplication(checkActivity(fragment));
        return new ViewModelProvider(ViewModelStores.of(fragment), factory);
    }
    
    @MainThread
    public static ViewModelProvider of(@NonNull final FragmentActivity activity, @NonNull final ViewModelProvider.Factory factory) {
        checkApplication((Activity)activity);
        return new ViewModelProvider(ViewModelStores.of(activity), factory);
    }
    
    public static class DefaultFactory extends ViewModelProvider.NewInstanceFactory
    {
        private Application mApplication;
        
        public DefaultFactory(@NonNull final Application application) {
            this.mApplication = application;
        }
        
        @NonNull
        @Override
        public <T extends ViewModel> T create(@NonNull final Class<T> modelClass) {
            if (AndroidViewModel.class.isAssignableFrom(modelClass)) {
                try {
                    return modelClass.getConstructor(Application.class).newInstance(this.mApplication);
                }
                catch (NoSuchMethodException e) {
                    throw new RuntimeException("Cannot create an instance of " + modelClass, e);
                }
                catch (IllegalAccessException e2) {
                    throw new RuntimeException("Cannot create an instance of " + modelClass, e2);
                }
                catch (InstantiationException e3) {
                    throw new RuntimeException("Cannot create an instance of " + modelClass, e3);
                }
                catch (InvocationTargetException e4) {
                    throw new RuntimeException("Cannot create an instance of " + modelClass, e4);
                }
            }
            return super.create(modelClass);
        }
    }
}
